

package ssw.gui;

import dialog.dlgAmmoChooser;
import java.awt.Image;
import java.io.File;
import java.io.IOException;
import common.CommonTools;
import components.Mech;
import components.ifMechLoadout;
import java.util.ArrayList;

import filehandlers.Media;
import Print.PrintMech;

public class dlgPrintSavedMechOptions extends javax.swing.JDialog {
    /**
     *
     */
    private static final long serialVersionUID = 3443117870878903897L;
    private Mech CurMech;
    private ifMechForm Parent;
    private boolean Result = false;
    private File MechImage = null;
    private File LogoImage = null;
    Media media = new Media();

    /** Creates new form dlgPrintSavedMechOptions */
    public dlgPrintSavedMechOptions(java.awt.Frame parent, boolean modal, Mech m, String Warrior, int Gunnery, int Piloting) {
        super(parent, modal);
        initComponents();
        Parent = (ifMechForm) parent;

        if (m == null) {
            CurMech = null;
            pnlBattleMech.setVisible(false);
            this.setSize(this.getWidth(), this.getHeight()-pnlBattleMech.getHeight());
            btnChooseLogo.setEnabled(false);
            btnChooseImage.setEnabled(false);
            lblImage.setText("The Mech Image must be set already.");
        } else {
            CurMech = m;
            if ( !media.DetermineMatchingImage(CurMech.GetName(), CurMech.GetModel(), CurMech.GetSSWImage()).isEmpty() )
                MechImage = new File(media.DetermineMatchingImage(CurMech.GetName(), CurMech.GetModel(), CurMech.GetSSWImage()));

            media.setLogo(lblImage, MechImage);
            pnlBattleMech.setBorder(javax.swing.BorderFactory.createTitledBorder(CurMech.GetFullName() + " Information"));
            lblBaseBV.setText( String.format( "%1$,d", CurMech.GetCurrentBV()) );
            lblAdjustBV.setText( String.format( "%1$,.0f", CommonTools.GetAdjustedBV( CurMech.GetCurrentBV(), cmbGunnery.getSelectedIndex(), cmbPiloting.getSelectedIndex() ) ) );
            txtWarriorName.setText( Warrior );
            cmbGunnery.setSelectedIndex( Gunnery );
            cmbPiloting.setSelectedIndex( Piloting );

            if( CurMech.IsOmnimech()){
                ArrayList Loadouts = CurMech.GetLoadouts();
                ifMechLoadout tempLoadout;
                cmbOmniVariant.setMaximumRowCount(Loadouts.size()+1);
                for (int i = 0; i < Loadouts.size();  ++i){
                    tempLoadout = (ifMechLoadout) Loadouts.get(i);
                    cmbOmniVariant.addItem(tempLoadout.GetName());
                    if (CurMech.GetLoadout().GetName().equals(tempLoadout.GetName())) {cmbOmniVariant.setSelectedItem(tempLoadout.GetName());}
                }
                cmbOmniVariant.removeItem("Not an Omni-Mech");
            }
            else{
                cmbOmniVariant.setVisible(false);
            }
        }

        if ( Parent != null ) {
            chkPrintCharts.setSelected(Parent.GetPrefs().getBoolean("UseCharts", false));
            chkPrintCanon.setSelected(Parent.GetPrefs().getBoolean("UseCanonDots", false));
            chkMWStats.setSelected(Parent.GetPrefs().getBoolean("NoPilot", false));
            if ( Parent.GetPrefs().getBoolean("NoPilot", false) ) {
                chkMWStatsActionPerformed(null);
            }
            if (Parent.GetPrefs().getBoolean("UseA4", false)) {
                cmbPaperSize.setSelectedIndex(1);
            }
            chkUseHexConversion.setSelected( Parent.GetPrefs().getBoolean( "UseMiniConversion", false ) );
            if( chkUseHexConversion.isSelected() ) {
                lblOneHex.setEnabled( true );
                cmbHexConvFactor.setEnabled( true );
                lblInches.setEnabled( true );
                cmbHexConvFactor.setSelectedIndex( Parent.GetPrefs().getInt( "MiniConversionRate", 0 ) );
            }

            if ( Parent.GetPrefs().get("LastLogo", "").length() > 0 ) {
                LogoImage = new File(Parent.GetPrefs().get("LastLogo", ""));
                media.setLogo(lblLogo, Parent.GetPrefs().get("LastLogo", ""));
            }
        }
    }

    public dlgPrintSavedMechOptions(java.awt.Frame parent, boolean modal, Mech m) {
        this(parent, modal, m, "", 4, 5);
    }

    public dlgPrintSavedMechOptions(java.awt.Frame parent, boolean modal, PrintMech m) {
        this(parent, modal, m.CurMech, m.getMechwarrior(), m.getGunnery(), m.getPiloting());
    }

    public dlgPrintSavedMechOptions(java.awt.Frame parent, boolean modal) {
        this(parent, modal, null, "", 4, 5);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btnPrint = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        pnlBattleMech = new javax.swing.JPanel();
        cmbOmniVariant = new javax.swing.JComboBox();
        txtWarriorName = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        lblAdjustBVLabel = new javax.swing.JLabel();
        lblAdjustBV = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lblBaseBV = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        cmbGunnery = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cmbPiloting = new javax.swing.JComboBox();
        pnlPrintOptions = new javax.swing.JPanel();
        chkPrintCharts = new javax.swing.JCheckBox();
        chkUseHexConversion = new javax.swing.JCheckBox();
        lblOneHex = new javax.swing.JLabel();
        cmbHexConvFactor = new javax.swing.JComboBox();
        lblInches = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        cmbPaperSize = new javax.swing.JComboBox();
        chkMWStats = new javax.swing.JCheckBox();
        chkPrintCanon = new javax.swing.JCheckBox();
        pnlImageOptions = new javax.swing.JPanel();
        chkPrintImage = new javax.swing.JCheckBox();
        btnChooseImage = new javax.swing.JButton();
        lblImage = new javax.swing.JLabel();
        chkLogo = new javax.swing.JCheckBox();
        chkStats = new javax.swing.JCheckBox();
        lblLogo = new javax.swing.JLabel();
        lblStats = new javax.swing.JLabel();
        btnChooseLogo = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        btnChangeAmmo = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Print Saved Mech");

        btnPrint.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ssw/Images/printer.png"))); // NOI18N
        btnPrint.setText("Print");
        btnPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintActionPerformed(evt);
            }
        });
        jPanel1.add(btnPrint);

        btnCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ssw/Images/cross-script.png"))); // NOI18N
        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });
        jPanel1.add(btnCancel);

        jPanel4.setLayout(new java.awt.GridBagLayout());

        pnlBattleMech.setBorder(javax.swing.BorderFactory.createTitledBorder("Battlemech Information"));

        cmbOmniVariant.setMaximumRowCount(1);
        cmbOmniVariant.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Not an Omni-Mech" }));
        cmbOmniVariant.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbOmniVariantActionPerformed(evt);
            }
        });

        txtWarriorName.setMaximumSize(new java.awt.Dimension(150, 20));
        txtWarriorName.setMinimumSize(new java.awt.Dimension(150, 20));
        txtWarriorName.setPreferredSize(new java.awt.Dimension(150, 20));

        jPanel2.setLayout(new java.awt.GridBagLayout());

        lblAdjustBVLabel.setText("Adjusted BV:");

        lblAdjustBV.setText("00,000");

        jLabel3.setText("Base BV:");

        lblBaseBV.setText("00,000");

        jLabel4.setText("Mechwarrior");

        cmbGunnery.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8" }));
        cmbGunnery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbGunneryActionPerformed(evt);
            }
        });

        jLabel1.setText("Gunnery");

        jLabel2.setText("Piloting");

        cmbPiloting.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "1", "2", "3", "4", "5", "6", "7", "8" }));
        cmbPiloting.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbPilotingActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlBattleMechLayout = new javax.swing.GroupLayout(pnlBattleMech);
        pnlBattleMech.setLayout(pnlBattleMechLayout);
        pnlBattleMechLayout.setHorizontalGroup(
            pnlBattleMechLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBattleMechLayout.createSequentialGroup()
                .addGroup(pnlBattleMechLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlBattleMechLayout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlBattleMechLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(cmbOmniVariant, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlBattleMechLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlBattleMechLayout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addGap(133, 133, 133)
                                .addComponent(jLabel1))
                            .addGroup(pnlBattleMechLayout.createSequentialGroup()
                                .addComponent(txtWarriorName, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(cmbGunnery, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlBattleMechLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(cmbPiloting, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 70, Short.MAX_VALUE)
                        .addGroup(pnlBattleMechLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlBattleMechLayout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblBaseBV))
                            .addGroup(pnlBattleMechLayout.createSequentialGroup()
                                .addComponent(lblAdjustBVLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lblAdjustBV)))))
                .addContainerGap())
        );
        pnlBattleMechLayout.setVerticalGroup(
            pnlBattleMechLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlBattleMechLayout.createSequentialGroup()
                .addGroup(pnlBattleMechLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlBattleMechLayout.createSequentialGroup()
                        .addGroup(pnlBattleMechLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addGap(1, 1, 1)
                        .addGroup(pnlBattleMechLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtWarriorName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbOmniVariant, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbGunnery, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbPiloting, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnlBattleMechLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(pnlBattleMechLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(lblBaseBV))
                        .addGap(1, 1, 1)
                        .addGroup(pnlBattleMechLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblAdjustBVLabel)
                            .addComponent(lblAdjustBV))
                        .addGap(145, 145, 145)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlPrintOptions.setBorder(javax.swing.BorderFactory.createTitledBorder("Print Options"));

        chkPrintCharts.setText("Print Tables and Movement Grid");
        chkPrintCharts.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkPrintChartsActionPerformed(evt);
            }
        });

        chkUseHexConversion.setText("Use Miniatures Scale for Movement");
        chkUseHexConversion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkUseHexConversionActionPerformed(evt);
            }
        });

        lblOneHex.setText("One Hex equals");
        lblOneHex.setEnabled(false);

        cmbHexConvFactor.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "1", "2", "3", "4", "5" }));
        cmbHexConvFactor.setEnabled(false);

        lblInches.setText("Inches");
        lblInches.setEnabled(false);

        jLabel5.setText("Paper Size:");
        jPanel3.add(jLabel5);

        cmbPaperSize.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Letter", "A4" }));
        jPanel3.add(cmbPaperSize);

        chkMWStats.setText("Do NOT print MechWarrior stats");
        chkMWStats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkMWStatsActionPerformed(evt);
            }
        });

        chkPrintCanon.setText("Print Canon Dot Patterns");

        javax.swing.GroupLayout pnlPrintOptionsLayout = new javax.swing.GroupLayout(pnlPrintOptions);
        pnlPrintOptions.setLayout(pnlPrintOptionsLayout);
        pnlPrintOptionsLayout.setHorizontalGroup(
            pnlPrintOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlPrintOptionsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlPrintOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlPrintOptionsLayout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(lblOneHex)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbHexConvFactor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblInches))
                    .addComponent(chkUseHexConversion)
                    .addComponent(chkPrintCanon)
                    .addComponent(chkPrintCharts)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(chkMWStats))
                .addContainerGap())
        );
        pnlPrintOptionsLayout.setVerticalGroup(
            pnlPrintOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlPrintOptionsLayout.createSequentialGroup()
                .addComponent(chkPrintCharts)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkPrintCanon)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chkUseHexConversion)
                .addGroup(pnlPrintOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlPrintOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(cmbHexConvFactor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblOneHex))
                    .addGroup(pnlPrintOptionsLayout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(lblInches)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addComponent(chkMWStats)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pnlImageOptions.setBorder(javax.swing.BorderFactory.createTitledBorder("Image Options"));

        chkPrintImage.setText("Print Mech");
        chkPrintImage.setToolTipText("From Mech file");
        chkPrintImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkPrintImageActionPerformed(evt);
            }
        });

        btnChooseImage.setText("Choose Image");
        btnChooseImage.setEnabled(false);
        btnChooseImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseImageActionPerformed(evt);
            }
        });

        lblImage.setBackground(new java.awt.Color(255, 255, 255));
        lblImage.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        lblImage.setOpaque(true);

        chkLogo.setText("Print Logo");
        chkLogo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkLogoActionPerformed(evt);
            }
        });

        chkStats.setText("Print Statistics");
        chkStats.setEnabled(false);
        chkStats.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkStatsActionPerformed(evt);
            }
        });

        lblLogo.setBackground(new java.awt.Color(255, 255, 255));
        lblLogo.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        lblLogo.setOpaque(true);

        lblStats.setBackground(new java.awt.Color(255, 255, 255));
        lblStats.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        lblStats.setEnabled(false);
        lblStats.setOpaque(true);

        btnChooseLogo.setText("Choose Logo");
        btnChooseLogo.setEnabled(false);
        btnChooseLogo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChooseLogoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlImageOptionsLayout = new javax.swing.GroupLayout(pnlImageOptions);
        pnlImageOptions.setLayout(pnlImageOptionsLayout);
        pnlImageOptionsLayout.setHorizontalGroup(
            pnlImageOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlImageOptionsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlImageOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnChooseImage)
                    .addComponent(chkPrintImage, javax.swing.GroupLayout.DEFAULT_SIZE, 133, Short.MAX_VALUE)
                    .addComponent(lblImage, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlImageOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlImageOptionsLayout.createSequentialGroup()
                        .addGroup(pnlImageOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(chkLogo, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblLogo, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnlImageOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lblStats, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(chkStats, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addComponent(btnChooseLogo)))
        );
        pnlImageOptionsLayout.setVerticalGroup(
            pnlImageOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlImageOptionsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlImageOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlImageOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(chkLogo)
                        .addComponent(chkStats))
                    .addComponent(chkPrintImage))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlImageOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblStats, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblImage, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlImageOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnChooseImage)
                    .addComponent(btnChooseLogo)))
        );

        btnChangeAmmo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/ssw/Images/ammo.png"))); // NOI18N
        btnChangeAmmo.setText("Change Ammo");
        btnChangeAmmo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnChangeAmmoActionPerformed(evt);
            }
        });
        jPanel5.add(btnChangeAmmo);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(pnlBattleMech, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(pnlPrintOptions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pnlImageOptions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(pnlBattleMech, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pnlImageOptions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(pnlPrintOptions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintActionPerformed
        if ( Parent != null ) {
            Parent.GetPrefs().putBoolean("UseA4", UseA4Paper());
            Parent.GetPrefs().putBoolean("UseCharts", chkPrintCharts.isSelected());
            Parent.GetPrefs().putBoolean("NoPilot", chkMWStats.isSelected());
            Parent.GetPrefs().putBoolean( "UseMiniConversion", chkUseHexConversion.isSelected() );
            Parent.GetPrefs().putInt( "MiniConversionRate", cmbHexConvFactor.getSelectedIndex() );
            Parent.GetPrefs().putBoolean("UseCanonDots", chkPrintCanon.isSelected());
        }

        Result = true;
        setVisible( false );
}//GEN-LAST:event_btnPrintActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        setVisible( false );
}//GEN-LAST:event_btnCancelActionPerformed

    private void cmbGunneryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbGunneryActionPerformed
        lblAdjustBV.setText( String.format( "%1$,.0f", CommonTools.GetAdjustedBV( CurMech.GetCurrentBV(), cmbGunnery.getSelectedIndex(), cmbPiloting.getSelectedIndex() ) ) );
}//GEN-LAST:event_cmbGunneryActionPerformed

    private void cmbPilotingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbPilotingActionPerformed
        lblAdjustBV.setText( String.format( "%1$,.0f", CommonTools.GetAdjustedBV( CurMech.GetCurrentBV(), cmbGunnery.getSelectedIndex(), cmbPiloting.getSelectedIndex() ) ) );
}//GEN-LAST:event_cmbPilotingActionPerformed

    private void chkMWStatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkMWStatsActionPerformed
        if ( pnlBattleMech.isVisible() ) {
            if( chkMWStats.isSelected() ) {
                lblAdjustBV.setText( String.format( "%1$,d", CurMech.GetCurrentBV() ) );
                cmbGunnery.setSelectedItem("4");
                cmbPiloting.setSelectedItem("5");
                cmbGunnery.setEnabled( false );
                cmbPiloting.setEnabled( false );
                txtWarriorName.setEnabled( false );
            } else {
                lblAdjustBV.setText( String.format( "%1$,.0f", CommonTools.GetAdjustedBV( CurMech.GetCurrentBV(), cmbGunnery.getSelectedIndex(), cmbPiloting.getSelectedIndex() ) ) );
                cmbGunnery.setEnabled( true );
                cmbPiloting.setEnabled( true );
                txtWarriorName.setEnabled( true );
            }
        }
}//GEN-LAST:event_chkMWStatsActionPerformed

    private void cmbOmniVariantActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbOmniVariantActionPerformed
        CurMech.SetCurLoadout((String) cmbOmniVariant.getSelectedItem());
        lblBaseBV.setText( String.format( "%1$,d", CurMech.GetCurrentBV()) );
        lblAdjustBV.setText( String.format( "%1$,.0f", CommonTools.GetAdjustedBV( CurMech.GetCurrentBV(), cmbGunnery.getSelectedIndex(), cmbPiloting.getSelectedIndex() ) ) );
    }//GEN-LAST:event_cmbOmniVariantActionPerformed

private void chkUseHexConversionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkUseHexConversionActionPerformed
    if( chkUseHexConversion.isSelected() ) {
        lblOneHex.setEnabled( true );
        cmbHexConvFactor.setEnabled( true );
        lblInches.setEnabled( true );
    } else {
        lblOneHex.setEnabled( false );
        cmbHexConvFactor.setEnabled( false );
        lblInches.setEnabled( false );
    }
}//GEN-LAST:event_chkUseHexConversionActionPerformed

private void btnChooseImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseImageActionPerformed
    String defaultDir = "";
    if ( Parent != null ) {defaultDir = Parent.GetPrefs().get("LastImagePath", "");}
    MechImage = media.SelectImage(defaultDir, "Select Image");

    try {
        if ( Parent != null ) {
            Parent.GetPrefs().put("LastImage", MechImage.getCanonicalPath());
            Parent.GetPrefs().put("LastImagePath", MechImage.getCanonicalPath().replace(MechImage.getName(), ""));
            Parent.GetPrefs().put("LastImageFile", MechImage.getName());
        }

        media.setLogo(lblImage, MechImage);
    } catch ( Exception e ) {
        //do nothing
    }
}//GEN-LAST:event_btnChooseImageActionPerformed

private void chkPrintImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkPrintImageActionPerformed
    if ( CurMech != null ) {
        btnChooseImage.setEnabled(chkPrintImage.isSelected());
    }
}//GEN-LAST:event_chkPrintImageActionPerformed

private void chkLogoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkLogoActionPerformed
    if ( CurMech != null ) { btnChooseLogo.setEnabled(chkLogo.isSelected()); }
}//GEN-LAST:event_chkLogoActionPerformed

private void chkStatsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkStatsActionPerformed
    chkPrintImage.setEnabled(!chkStats.isSelected());
    btnChooseImage.setEnabled(!chkStats.isSelected());
}//GEN-LAST:event_chkStatsActionPerformed

private void btnChooseLogoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChooseLogoActionPerformed
    String defaultDir = "";
    if ( Parent != null ) {defaultDir = Parent.GetPrefs().get("LastLogo", "");}
    LogoImage = media.SelectImage(defaultDir, "Select Logo");

    try {
        if ( Parent != null ) {
            Parent.GetPrefs().put("LastLogo", LogoImage.getCanonicalPath());
            Parent.GetPrefs().put("LastLogoPath", LogoImage.getCanonicalPath().replace(LogoImage.getName(), ""));
            Parent.GetPrefs().put("LastLogoFile", LogoImage.getName());
        }

        media.setLogo(lblLogo, LogoImage);

    } catch ( Exception e ) {
        //do nothing
    }
}//GEN-LAST:event_btnChooseLogoActionPerformed

private void btnChangeAmmoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnChangeAmmoActionPerformed
    try {
        dlgAmmoChooser Ammo = new dlgAmmoChooser( this, false, CurMech, Parent.GetData() );
        Ammo.setLocationRelativeTo( this );
        if( Ammo.HasAmmo() ) {
            Ammo.setVisible( true );
        } else {
            Media.Messager( this, "This 'Mech has no ammunition to exchange." );
            Ammo.dispose();
        }
    } catch( Exception e ) {
        Media.Messager(this, "There was an error altering the ammunition on this 'Mech:\n" + e.getMessage() );
    }
}//GEN-LAST:event_btnChangeAmmoActionPerformed

private void chkPrintChartsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkPrintChartsActionPerformed
    // TODO add your handling code here:
}//GEN-LAST:event_chkPrintChartsActionPerformed

    public boolean Result() {
        return Result;
    }

    public boolean PrintPilot() {
        return ! chkMWStats.isSelected();
    }

    public String GetWarriorName() {
        return txtWarriorName.getText();
    }

    public int GetGunnery() {
        return cmbGunnery.getSelectedIndex();
    }

    public int GetPiloting() {
        return cmbPiloting.getSelectedIndex();
    }

    public boolean AdjustBV() {
        return true;
    }

    public double GetAdjustedBV() {
        return CommonTools.GetAdjustedBV( CurMech.GetCurrentBV(), cmbGunnery.getSelectedIndex(), cmbPiloting.getSelectedIndex() );
    }

    public boolean PrintCharts() {
        return chkPrintCharts.isSelected();
    }

    public boolean UseA4Paper() {
        if( cmbPaperSize.getSelectedIndex() == 0 ) {
            return false;
        } else {
            return true;
        }
    }

    public boolean UseMiniConversion() {
        return chkUseHexConversion.isSelected();
    }

    public int GetMiniConversionRate() {
        switch( cmbHexConvFactor.getSelectedIndex() ) {
            case 0:
                return 1;
            case 1:
                return 2;
            case 2:
                return 3;
            case 3:
                return 4;
            case 4:
                return 5;
            default:
                return 1;
        }
    }

    public boolean getCanon() {
        return chkPrintCanon.isSelected();
    }
    public Image getImage() {
        if (chkPrintImage.isSelected() && MechImage != null) {
            try {
                return media.GetImage(MechImage.getCanonicalPath());
            } catch (IOException ex) {
                return null;
            } catch (NullPointerException np) {
                return null;
            }
        } else {
            return null;
        }
    }

    public Image getLogo() {
        if (chkLogo.isSelected() && LogoImage != null) {
            try {
                return media.GetImage(LogoImage.getCanonicalPath());
            } catch (IOException ex) {
                return null;
            } catch ( NullPointerException np ) {
                return null;
            }
        } else {
            return null;
        }
    }

    public void setLogo(File logo)
    {
        LogoImage = logo;
        media.setLogo(lblLogo, logo);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnChangeAmmo;
    private javax.swing.JButton btnChooseImage;
    private javax.swing.JButton btnChooseLogo;
    private javax.swing.JButton btnPrint;
    private javax.swing.JCheckBox chkLogo;
    private javax.swing.JCheckBox chkMWStats;
    private javax.swing.JCheckBox chkPrintCanon;
    private javax.swing.JCheckBox chkPrintCharts;
    private javax.swing.JCheckBox chkPrintImage;
    private javax.swing.JCheckBox chkStats;
    private javax.swing.JCheckBox chkUseHexConversion;
    private javax.swing.JComboBox cmbGunnery;
    private javax.swing.JComboBox cmbHexConvFactor;
    private javax.swing.JComboBox cmbOmniVariant;
    private javax.swing.JComboBox cmbPaperSize;
    private javax.swing.JComboBox cmbPiloting;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JLabel lblAdjustBV;
    private javax.swing.JLabel lblAdjustBVLabel;
    private javax.swing.JLabel lblBaseBV;
    private javax.swing.JLabel lblImage;
    private javax.swing.JLabel lblInches;
    private javax.swing.JLabel lblLogo;
    private javax.swing.JLabel lblOneHex;
    private javax.swing.JLabel lblStats;
    private javax.swing.JPanel pnlBattleMech;
    private javax.swing.JPanel pnlImageOptions;
    private javax.swing.JPanel pnlPrintOptions;
    private javax.swing.JTextField txtWarriorName;
    // End of variables declaration//GEN-END:variables

}
