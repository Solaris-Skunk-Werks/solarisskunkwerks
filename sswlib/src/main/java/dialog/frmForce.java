/*
Copyright (c) 2008, George Blouin Jr. (skyhigh@solaris7.com)
All rights reserved.

Redistribution and use in source and binary forms, with or without modification, are
permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright notice, this list of
conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright notice, this list
of conditions and the following disclaimer in the documentation and/or other materials
provided with the distribution.
    * Neither the name of George Blouin Jr nor the names of contributors may be
used to endorse or promote products derived from this software without specific prior
written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS
OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR
TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/

package dialog;

import java.awt.Cursor;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.Transferable;
import java.io.File;
import java.io.IOException;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;

import Force.*;
import Force.Skills.Skill;
import Force.View.abTable;
import Force.View.tbBattleForce;
import Force.View.tbChatInfo;
import Force.View.tbTotalWarfare;
import filehandlers.*;
import Print.*;
import IO.*;
import Print.preview.dlgPreview;
import battleforce.BattleForce;
import common.Constants;
import common.DataFactory;
import common.DesignForm;
import components.Mech;

import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.prefs.Preferences;


public class frmForce extends javax.swing.JFrame implements java.awt.datatransfer.ClipboardOwner {
    /**
     *
     */
    private static final long serialVersionUID = -2004297022968677762L;
    private Force force = new Force();
    private Media media = new Media();
    private ImageTracker imageTracker;
    private DesignForm parent;
    private Preferences prefs = Preferences.userRoot().node( Constants.SSWPrefs );
    public Skills skills = new Skills();

    private TableModelListener forceChanged = new TableModelListener() {
        public void tableChanged(TableModelEvent e) {
            force.setupTable(tblForce);
            lblTotalBV.setText(String.format("%1$,.0f", getForce().TotalAdjustedBV));
            lblTotalTons.setText(String.format("%1$,.0f", getForce().TotalTonnage) + " Tons");
            lblTotalUnits.setText(getForce().getUnits().size() + " Units");
        }
    };

    /** Creates new form frmForce */
    public frmForce( DesignForm Parent, ImageTracker imageTracker ) {
        initComponents();

        this.parent = Parent;
        this.imageTracker = imageTracker;


        force.setCurrentModel(new tbTotalWarfare(force));
        force.getCurrentModel().addTableModelListener(forceChanged);
    }

    private void LoadMech() {
        try
        {
            Unit Data = (Unit) ((abTable) tblForce.getModel()).getForce().getUnits().get( tblForce.convertRowIndexToModel( tblForce.getSelectedRow() ) );
            Data.LoadUnit();
            if ( Data.m != null ) {
                ArrayList u = new ArrayList();
                u.add(Data.m);
                parent.setUnit(u);
                parent.loadUnitIntoGUI();
                this.setVisible(false);
            } else {
                Media.Messager("Unable to load that 'Mech.");
            }

        } catch ( Exception e ) {
            Media.Messager(e.getMessage());
            System.out.println(e.getMessage());
        }
    }

    public void Add( Mech m, String filename ) {
        Unit u = new Unit(m);
        u.Filename = filename;
        force.AddUnit(u);
    }








    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tlbActions = new javax.swing.JToolBar();
        btnOpen = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        btnPrintForce = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        btnExportMUL = new javax.swing.JButton();
        btnExportMTFs = new javax.swing.JButton();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        btnAddMech = new javax.swing.JButton();
        btnRemoveUnit = new javax.swing.JButton();
        brnClearForce = new javax.swing.JButton();
        btnRefresh = new javax.swing.JButton();
        jSeparator4 = new javax.swing.JToolBar.Separator();
        btnAmmoChooser = new javax.swing.JButton();
        btnImages = new javax.swing.JButton();
        jSeparator5 = new javax.swing.JToolBar.Separator();
        jLabel4 = new javax.swing.JLabel();
        cmbView = new javax.swing.JComboBox();
        spnList = new javax.swing.JScrollPane();
        tblForce = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        lblTotalUnits = new javax.swing.JLabel();
        lblTotalBV = new javax.swing.JLabel();
        lblTotalTons = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        lblLogo = new javax.swing.JLabel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        btnFilter = new javax.swing.JButton();
        spnSkillSeperationLimit = new javax.swing.JSpinner();
        jLabel6 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        rdoPiloting = new javax.swing.JRadioButton();
        rdoGunnery = new javax.swing.JRadioButton();
        txtBVLimit = new javax.swing.JTextField();
        rdoNeither = new javax.swing.JRadioButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        cmbSkillLevel = new javax.swing.JComboBox();
        btnRandomGen = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        cmbNameFilter = new javax.swing.JComboBox();
        chkOverwriteName = new javax.swing.JCheckBox();
        btnRandomName = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        cmbUnitType = new javax.swing.JComboBox();
        txtForceName = new javax.swing.JTextField();
        lblForceName = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtGunnery = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        txtPiloting = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        mnuFile = new javax.swing.JMenu();
        mnuOpen = new javax.swing.JMenuItem();
        mnuSave = new javax.swing.JMenuItem();
        jSeparator6 = new javax.swing.JSeparator();
        mnuPrint = new javax.swing.JMenuItem();
        mnuExport = new javax.swing.JMenu();
        mnuExportMUL = new javax.swing.JMenuItem();
        mnuExportMTF = new javax.swing.JMenuItem();
        mnuExportClipboard = new javax.swing.JMenuItem();
        mnuExportText = new javax.swing.JMenuItem();
        mnuOptions = new javax.swing.JMenu();
        mnuView = new javax.swing.JMenu();
        mnuViewTW = new javax.swing.JMenuItem();
        mnuViewBF = new javax.swing.JMenuItem();
        mnuViewInf = new javax.swing.JMenuItem();
        mnuRun = new javax.swing.JMenu();
        mnuRunBFB = new javax.swing.JMenuItem();

        setTitle("Force List");
        setMinimumSize(null);
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        tlbActions.setFloatable(false);
        tlbActions.setRollover(true);

        btnOpen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/folder-open-document.png"))); // NOI18N
        btnOpen.setToolTipText("Open Force");
        btnOpen.setFocusable(false);
        btnOpen.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnOpen.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOpenActionPerformed(evt);
            }
        });
        tlbActions.add(btnOpen);

        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/disk-black.png"))); // NOI18N
        btnSave.setToolTipText("Save Force");
        btnSave.setFocusable(false);
        btnSave.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSave.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        tlbActions.add(btnSave);
        tlbActions.add(jSeparator2);

        btnPrintForce.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/printer.png"))); // NOI18N
        btnPrintForce.setToolTipText("Preview/Print Forces");
        btnPrintForce.setFocusable(false);
        btnPrintForce.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnPrintForce.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnPrintForce.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintForceActionPerformed(evt);
            }
        });
        tlbActions.add(btnPrintForce);
        tlbActions.add(jSeparator1);

        btnExportMUL.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/document--arrow.png"))); // NOI18N
        btnExportMUL.setToolTipText("Export MUL");
        btnExportMUL.setFocusable(false);
        btnExportMUL.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnExportMUL.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnExportMUL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportMULActionPerformed(evt);
            }
        });
        tlbActions.add(btnExportMUL);

        btnExportMTFs.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/documents--arrow.png"))); // NOI18N
        btnExportMTFs.setToolTipText("Export All to MTF");
        btnExportMTFs.setFocusable(false);
        btnExportMTFs.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnExportMTFs.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnExportMTFs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportMTFsActionPerformed(evt);
            }
        });
        tlbActions.add(btnExportMTFs);
        tlbActions.add(jSeparator3);

        btnAddMech.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/clipboard--plus.png"))); // NOI18N
        btnAddMech.setToolTipText("Add Unit");
        btnAddMech.setFocusable(false);
        btnAddMech.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAddMech.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAddMech.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddMechActionPerformed(evt);
            }
        });
        tlbActions.add(btnAddMech);

        btnRemoveUnit.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/clipboard--minus.png"))); // NOI18N
        btnRemoveUnit.setToolTipText("Remove Unit");
        btnRemoveUnit.setFocusable(false);
        btnRemoveUnit.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnRemoveUnit.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnRemoveUnit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveUnitActionPerformed(evt);
            }
        });
        tlbActions.add(btnRemoveUnit);

        brnClearForce.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/clipboard-empty.png"))); // NOI18N
        brnClearForce.setToolTipText("Clear Force List");
        brnClearForce.setFocusable(false);
        brnClearForce.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        brnClearForce.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        brnClearForce.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                brnClearForceActionPerformed(evt);
            }
        });
        tlbActions.add(brnClearForce);

        btnRefresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/arrow-circle-double.png"))); // NOI18N
        btnRefresh.setToolTipText("Refresh Force List");
        btnRefresh.setFocusable(false);
        btnRefresh.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnRefresh.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshActionPerformed(evt);
            }
        });
        tlbActions.add(btnRefresh);
        tlbActions.add(jSeparator4);

        btnAmmoChooser.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/ammo.png"))); // NOI18N
        btnAmmoChooser.setToolTipText("Ammo Selector");
        btnAmmoChooser.setFocusable(false);
        btnAmmoChooser.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAmmoChooser.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAmmoChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAmmoChooserActionPerformed(evt);
            }
        });
        tlbActions.add(btnAmmoChooser);

        btnImages.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/images-stack.png"))); // NOI18N
        btnImages.setToolTipText("Manage BFB.Images");
        btnImages.setFocusable(false);
        btnImages.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnImages.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnImages.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImagesActionPerformed(evt);
            }
        });
        tlbActions.add(btnImages);
        tlbActions.add(jSeparator5);

        jLabel4.setText("View:");
        tlbActions.add(jLabel4);

        cmbView.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Total Warfare", "BattleForce", "Information" }));
        cmbView.setMaximumSize(new java.awt.Dimension(100, 18));
        cmbView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbViewActionPerformed(evt);
            }
        });
        tlbActions.add(cmbView);

        tblForce.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblForce.setGridColor(new java.awt.Color(204, 204, 204));
        tblForce.setRowMargin(2);
        tblForce.setShowVerticalLines(false);
        tblForce.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblForceMouseClicked(evt);
            }
        });
        tblForce.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tblForceKeyReleased(evt);
            }
        });
        spnList.setViewportView(tblForce);

        lblTotalUnits.setText("0 Units");

        lblTotalBV.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblTotalBV.setText("0 BV");

        lblTotalTons.setText("0 Tons");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblTotalUnits, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 348, Short.MAX_VALUE)
                .addComponent(lblTotalTons, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(126, 126, 126)
                .addComponent(lblTotalBV, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTotalUnits)
                    .addComponent(lblTotalBV)
                    .addComponent(lblTotalTons))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        lblLogo.setToolTipText("Unit Logo");
        lblLogo.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        lblLogo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lblLogoMouseClicked(evt);
            }
        });

        btnFilter.setText("Balance");
        btnFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFilterActionPerformed(evt);
            }
        });

        spnSkillSeperationLimit.setModel(new javax.swing.SpinnerNumberModel(3, 0, 7, 1));

        jLabel6.setText("Max BV:");

        jLabel11.setText("Minimize:");

        jLabel7.setText("Max Skill Seperation:");

        rdoPiloting.setText("Piloting");

        rdoGunnery.setText("Gunnery");

        rdoNeither.setSelected(true);
        rdoNeither.setText("Neither");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rdoNeither)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rdoGunnery))
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addComponent(jLabel6)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(txtBVLimit))
                        .addGroup(jPanel3Layout.createSequentialGroup()
                            .addComponent(jLabel7)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(spnSkillSeperationLimit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnFilter)
                    .addComponent(rdoPiloting))
                .addGap(3, 3, 3))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtBVLimit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnFilter))
                .addGap(3, 3, 3)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(spnSkillSeperationLimit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(rdoNeither)
                    .addComponent(rdoGunnery)
                    .addComponent(rdoPiloting))
                .addContainerGap())
        );

        jTabbedPane1.addTab("BV Balance", jPanel3);

        jLabel12.setText("Skill Level:");

        cmbSkillLevel.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Random", "Green", "Regular", "Veteran", "Elite" }));

        btnRandomGen.setText("Generate");
        btnRandomGen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRandomGenActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbSkillLevel, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnRandomGen)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(cmbSkillLevel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnRandomGen))
                .addContainerGap(38, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Random Skills", jPanel5);

        jLabel14.setText("Filter By:");

        cmbNameFilter.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Random" }));

        chkOverwriteName.setText("Overwrite Existing");

        btnRandomName.setText("Generate");
        btnRandomName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRandomNameActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(chkOverwriteName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                        .addComponent(btnRandomName))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel14)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cmbNameFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(cmbNameFilter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkOverwriteName)
                    .addComponent(btnRandomName))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Name Generation", jPanel4);

        jLabel5.setText("Unit Type:");

        jLabel3.setText("Override Skills");

        cmbUnitType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Inner Sphere", "Clan", "Comstar / Word of Blake" }));
        cmbUnitType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbUnitTypeActionPerformed(evt);
            }
        });

        txtForceName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtForceNameFocusLost(evt);
            }
        });
        txtForceName.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtForceNameKeyReleased(evt);
            }
        });

        lblForceName.setText("Force Name:");

        jLabel2.setText("P");

        txtGunnery.setText("4");
        txtGunnery.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtGunneryFocusGained(evt);
            }
        });
        txtGunnery.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtGunneryKeyReleased(evt);
            }
        });

        jLabel1.setText("G");

        txtPiloting.setText("5");
        txtPiloting.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtPilotingFocusGained(evt);
            }
        });
        txtPiloting.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtPilotingKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbUnitType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtGunnery, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtPiloting, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(lblForceName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtForceName, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtForceName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblForceName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(cmbUnitType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtGunnery, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(txtPiloting, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(lblLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 117, Short.MAX_VALUE)
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblLogo, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        mnuFile.setText("File");

        mnuOpen.setText("Open");
        mnuOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuOpenActionPerformed(evt);
            }
        });
        mnuFile.add(mnuOpen);

        mnuSave.setText("Save");
        mnuSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuSaveActionPerformed(evt);
            }
        });
        mnuFile.add(mnuSave);
        mnuFile.add(jSeparator6);

        mnuPrint.setText("Print");
        mnuPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuPrintActionPerformed(evt);
            }
        });
        mnuFile.add(mnuPrint);

        jMenuBar1.add(mnuFile);

        mnuExport.setText("Export");

        mnuExportMUL.setText("MUL");
        mnuExportMUL.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuExportMULActionPerformed(evt);
            }
        });
        mnuExport.add(mnuExportMUL);

        mnuExportMTF.setText("MTF");
        mnuExportMTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuExportMTFActionPerformed(evt);
            }
        });
        mnuExport.add(mnuExportMTF);

        mnuExportClipboard.setText("Clipboard");
        mnuExportClipboard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuExportClipboardActionPerformed(evt);
            }
        });
        mnuExport.add(mnuExportClipboard);

        mnuExportText.setText("Text");
        mnuExportText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuExportTextActionPerformed(evt);
            }
        });
        mnuExport.add(mnuExportText);

        jMenuBar1.add(mnuExport);

        mnuOptions.setText("Options");

        mnuView.setText("View");

        mnuViewTW.setText("Total Warfare");
        mnuViewTW.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuViewTWActionPerformed(evt);
            }
        });
        mnuView.add(mnuViewTW);

        mnuViewBF.setText("BattleForce");
        mnuViewBF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuViewBFActionPerformed(evt);
            }
        });
        mnuView.add(mnuViewBF);

        mnuViewInf.setText("Information Line");
        mnuViewInf.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuViewInfActionPerformed(evt);
            }
        });
        mnuView.add(mnuViewInf);

        mnuOptions.add(mnuView);

        jMenuBar1.add(mnuOptions);

        mnuRun.setText("Run");

        mnuRunBFB.setText("Force Balancer");
        mnuRunBFB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mnuRunBFBActionPerformed(evt);
            }
        });
        mnuRun.add(mnuRunBFB);

        jMenuBar1.add(mnuRun);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tlbActions, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 800, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(spnList, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 780, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(tlbActions, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spnList, javax.swing.GroupLayout.DEFAULT_SIZE, 192, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        force.RefreshBV();
    }//GEN-LAST:event_formWindowOpened

    private void btnRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshActionPerformed
        force.RefreshBV();
}//GEN-LAST:event_btnRefreshActionPerformed

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
        force.RefreshBV();
    }//GEN-LAST:event_formWindowGainedFocus

    private void tblForceMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblForceMouseClicked
        if (evt.getClickCount() >= 2) {
            if ( javax.swing.JOptionPane.showOptionDialog(this, "What would you like to do with this unit?", "Unit Options", javax.swing.JOptionPane.YES_NO_OPTION, javax.swing.JOptionPane.INFORMATION_MESSAGE, null, new Object[]{"Load in Designer", "Load Unit for Editing"}, null) == javax.swing.JOptionPane.YES_OPTION ) {
                LoadMech();
            } else {
                Unit u = force.getUnits().get(tblForce.convertRowIndexToModel(tblForce.getSelectedRow()));
                dlgUnit dUnit = new dlgUnit(this, false, force, u, imageTracker);
                dUnit.setLocationRelativeTo(this);
                dUnit.setVisible(true);
                force.RefreshBV();
            }
        }
    }//GEN-LAST:event_tblForceMouseClicked

    private void brnClearForceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_brnClearForceActionPerformed
        if (javax.swing.JOptionPane.showConfirmDialog(this, "Are you sure you want to clear the entire list?") == javax.swing.JOptionPane.YES_OPTION) {
            force.Clear();
            txtForceName.setText("");
            lblLogo.setIcon(null);
            cmbUnitType.setSelectedIndex(0);
        }
    }//GEN-LAST:event_brnClearForceActionPerformed

    private void btnRemoveUnitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveUnitActionPerformed
         int[] rows = tblForce.getSelectedRows();
         ArrayList<Unit> units = new ArrayList<Unit>();
         for ( int i : rows ) {
             Unit u = (Unit) force.getUnits().get(tblForce.convertRowIndexToModel(i));
             units.add(u);
         }
         for ( Unit u : units ) {
             force.RemoveUnit(u);
         }
    }//GEN-LAST:event_btnRemoveUnitActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        if ( force.getUnits().size() > 0 ) {
            File saveFile = media.SelectFile(prefs.get("LastOpenForce", ""), "force", "Save To...");
            if ( saveFile != null ) {
                ForceWriter writer = new ForceWriter();
                try
                {
                    writer.SerializeForce(force, saveFile.getCanonicalPath());
                    prefs.put("LastOpenForce", saveFile.getCanonicalPath());
                    Media.Messager("Your force has been saved to " + saveFile.getCanonicalPath());
                } catch ( IOException ie ) {
                    Media.Messager(ie.getMessage());
                    System.out.println(ie.getMessage());
                }
            }
        } else {
            Media.Messager("You must add at least one unit before saving.");
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOpenActionPerformed
        File forceFile = media.SelectFile(prefs.get("LastOpenForce", ""), "force", "Load Force List");
        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        DataReader reader = new DataReader();
        if ( forceFile != null ) {
            try {
                force = new Force(reader.ReadNode(forceFile.getCanonicalPath(), "force"));
                force.setCurrentModel(new tbTotalWarfare(force));
                force.getCurrentModel().addTableModelListener(forceChanged);
                txtForceName.setText(force.ForceName);
                if ( force.getType().equals(BattleForce.InnerSphere) ) {
                    cmbUnitType.setSelectedIndex(0);
                } else if ( force.getType().equals(BattleForce.Clan) ) {
                    cmbUnitType.setSelectedIndex(1);
                } else {
                    cmbUnitType.setSelectedIndex(2);
                }
                media.setLogo(lblLogo, new File(force.LogoPath));
                force.RefreshBV();
                prefs.put("LastOpenForce", forceFile.getCanonicalPath());
            } catch (Exception ex) {
                System.out.println(ex.getMessage());
                Media.Messager("Could not open force.\n" + ex.getMessage());
            }
        }
        this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_btnOpenActionPerformed

    private void btnPrintForceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintForceActionPerformed
        PagePrinter printer = new PagePrinter();
        printer.setJobName(force.ForceName);
        Scenario scenario = new Scenario(force);

        //Force List
        ForceListPrinter sheet = new ForceListPrinter(imageTracker);
        sheet.AddForce(force);
        printer.Append( BFBPrinter.Letter.toPage(), sheet );

        dlgPreview prv = new dlgPreview("Print Preview", this, printer, scenario, imageTracker);
        prv.setLocationRelativeTo(this);
        prv.setVisible(true);
    }//GEN-LAST:event_btnPrintForceActionPerformed

    private void btnExportMULActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportMULActionPerformed
        MULWriter mw = new MULWriter(force);
        File mulFile = media.SelectFile( prefs.get( "MTFExportPath", "" ), "mul", "Select MUL file" );
        try {
            String filename = mulFile.getCanonicalPath();
            if ( ! filename.endsWith(".mul") ) { filename += ".mul"; }
            mw.Write(filename);
            Media.Messager(filename + " saved.");
        } catch (IOException ex) {
            Media.Messager("Could not export MUL file.\n" + ex.getMessage());
            System.out.println(ex.getMessage());
        }
    }//GEN-LAST:event_btnExportMULActionPerformed

    private void btnAddMechActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddMechActionPerformed
        parent.showOpenDialog();
}//GEN-LAST:event_btnAddMechActionPerformed

    private void btnExportMTFsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportMTFsActionPerformed
        String  error = "",
                filename = "";
        MTFWriter mtf = new MTFWriter();
        String mtfDir = media.GetDirectorySelection(null, prefs.get( "MTFExportPath", "" ) );
        if (!mtfDir.endsWith(File.separator)) { mtfDir += File.separator; }

        for ( int i = 0; i < force.getUnits().size(); i++ ) {
            Unit u = (Unit) force.getUnits().get(i);
            u.LoadUnit();
            mtf.setMech(u.m);
            try {
                filename = mtfDir + u.m.GetFullName() + ".mtf";
                mtf.WriteMTF(filename);
            } catch (IOException ie) {
                System.out.println(ie.getMessage());
                error += "Attempted " + filename + ": " + ie.getMessage() + "\n";
            }
        }

        if ( !error.isEmpty() ) {
            Media.Messager(error);
        } else {
            Media.Messager("All units have been saved to MTF.");
        }
    }//GEN-LAST:event_btnExportMTFsActionPerformed

    private void txtGunneryKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtGunneryKeyReleased
        if ( !txtGunnery.getText().isEmpty() ) {
            for ( int i = 0; i < force.getUnits().size(); i++ ) {
                Unit u = (Unit) force.getUnits().get(i);
                u.setGunnery(Integer.parseInt(txtGunnery.getText()));
                u.Refresh();
            }
            force.RefreshBV();
        }
    }//GEN-LAST:event_txtGunneryKeyReleased

    private void txtPilotingKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPilotingKeyReleased
        if ( !txtPiloting.getText().isEmpty() ) {
            for ( int i = 0; i < force.getUnits().size(); i++ ) {
                Unit u = (Unit) force.getUnits().get(i);
                u.setPiloting(Integer.parseInt(txtPiloting.getText()));
                u.Refresh();
            }
            force.RefreshBV();
        }
    }//GEN-LAST:event_txtPilotingKeyReleased

    private void txtGunneryFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtGunneryFocusGained
        txtGunnery.selectAll();
    }//GEN-LAST:event_txtGunneryFocusGained

    private void txtPilotingFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtPilotingFocusGained
        txtPiloting.selectAll();
    }//GEN-LAST:event_txtPilotingFocusGained

    private void btnAmmoChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAmmoChooserActionPerformed
        if ( tblForce.getSelectedRowCount() > 0 ) {
            int[] rows = tblForce.getSelectedRows();
            for ( int i=0; i < rows.length; i++ ) {
                try {
                    Unit data = (Unit) force.getUnits().get( tblForce.convertRowIndexToModel( rows[i] ) );
                    data.LoadUnit();
                    if ( data.m != null ) {
                        dlgAmmoChooser Ammo = new dlgAmmoChooser( this, false, data.m, new DataFactory(data.m) );
                        Ammo.setLocationRelativeTo( this );
                        if( Ammo.HasAmmo() ) {
                            Ammo.setVisible( true );
                        } else {
                            Media.Messager("This 'Mech has no ammunition to exchange." );
                            Ammo.dispose();
                        }
                    } else {
                        Media.Messager("The 'Mech could not be loaded from " + data.Filename + ", cannot adjust ammo.");
                    }
                } catch( Exception e ) {
                    Media.Messager("There was an error altering the ammunition on this 'Mech:\n" + e.getMessage() );
                }
            }
        }
    }//GEN-LAST:event_btnAmmoChooserActionPerformed

    private void txtForceNameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtForceNameFocusLost
        force.ForceName = txtForceName.getText();
    }//GEN-LAST:event_txtForceNameFocusLost

    private void txtForceNameKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtForceNameKeyReleased
        force.ForceName = txtForceName.getText();
    }//GEN-LAST:event_txtForceNameKeyReleased

    private void lblLogoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lblLogoMouseClicked
        File logo = media.SelectImage( prefs.get("LastOpenLogo", ""), "Select Logo");
        try {
            if ( logo != null ) {
                prefs.put("LastOpenLogo", logo.getPath().toString());
                force.LogoPath = logo.getCanonicalPath();
                media.setLogo(lblLogo, logo);
            }
        } catch (IOException ex) {
            Media.Messager("Could not load Logo.");
            System.out.println(ex.getMessage());
        }
}//GEN-LAST:event_lblLogoMouseClicked

    private void btnImagesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImagesActionPerformed
        dlgImageMgr img = new dlgImageMgr( null, force, imageTracker );
        if ( img.hasWork ) {
            img.setLocationRelativeTo(this);
            img.setVisible(true);
        }
    }//GEN-LAST:event_btnImagesActionPerformed

    private void cmbViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbViewActionPerformed
        switch ( cmbView.getSelectedIndex() ) {
            case 0: force.setCurrentModel(new tbTotalWarfare(force)); break;
            case 1: force.setCurrentModel(new tbBattleForce(force)); break;
            case 2: force.setCurrentModel(new tbChatInfo(force)); break;
        }
        force.setupTable(tblForce);
        force.RefreshBV();
    }//GEN-LAST:event_cmbViewActionPerformed

    private void cmbUnitTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbUnitTypeActionPerformed
        switch ( cmbUnitType.getSelectedIndex() ) {
            case 0: force.setType(BattleForce.InnerSphere); break;
            case 1: force.setType(BattleForce.Clan); break;
            case 2: force.setType(BattleForce.Comstar); break;
        }
    }//GEN-LAST:event_cmbUnitTypeActionPerformed

    private void mnuOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuOpenActionPerformed
        btnOpenActionPerformed(evt);
}//GEN-LAST:event_mnuOpenActionPerformed

    private void mnuSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuSaveActionPerformed
        btnSaveActionPerformed(evt);
}//GEN-LAST:event_mnuSaveActionPerformed

    private void mnuExportMULActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuExportMULActionPerformed
        btnExportMULActionPerformed(evt);
    }//GEN-LAST:event_mnuExportMULActionPerformed

    private void mnuExportMTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuExportMTFActionPerformed
        btnExportMTFsActionPerformed(evt);
    }//GEN-LAST:event_mnuExportMTFActionPerformed

    private void mnuExportClipboardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuExportClipboardActionPerformed
        String data = "";

        data += force.SerializeClipboard();

        java.awt.datatransfer.StringSelection export = new java.awt.datatransfer.StringSelection( data );
        java.awt.datatransfer.Clipboard clipboard = java.awt.Toolkit.getDefaultToolkit().getSystemClipboard();
        clipboard.setContents( export, this );
    }//GEN-LAST:event_mnuExportClipboardActionPerformed

    private void mnuExportTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuExportTextActionPerformed
        WaitCursor();
        TXTWriter txtWrite = new TXTWriter();
        File filename = media.SelectFile(prefs.get("TXTDirectory", ""), "txt", "Save");
        if ( filename == null ) { return; }

        try {
            txtWrite.WriteForces(filename.getCanonicalPath(), force);

            prefs.put("TXTDirectory", filename.getCanonicalPath());
            Media.Messager("Your force has been exported to " + filename.getCanonicalPath());
        } catch (IOException ex) {
            //do nothing
            System.out.println(ex.getMessage());
            Media.Messager("Unable to save \n" + ex.getMessage() );
        }
        DefaultCursor();
    }//GEN-LAST:event_mnuExportTextActionPerformed

    private void mnuRunBFBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuRunBFBActionPerformed
        String[] call = { "java", "-Xmx256m", "-jar", "./bfb.jar" };
        try {
            Runtime.getRuntime().exec(call);
        } catch (Exception ex) {
            Media.Messager("Error while trying to open BFB\n" + ex.getMessage());
            System.out.println(ex.getMessage());
        }
    }//GEN-LAST:event_mnuRunBFBActionPerformed

    private void mnuPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuPrintActionPerformed
        btnPrintForceActionPerformed(evt);
    }//GEN-LAST:event_mnuPrintActionPerformed

    private void mnuViewTWActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuViewTWActionPerformed
        cmbView.setSelectedIndex(0);
    }//GEN-LAST:event_mnuViewTWActionPerformed

    private void mnuViewBFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuViewBFActionPerformed
        cmbView.setSelectedIndex(1);
    }//GEN-LAST:event_mnuViewBFActionPerformed

    private void mnuViewInfActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mnuViewInfActionPerformed
        cmbView.setSelectedIndex(2);
    }//GEN-LAST:event_mnuViewInfActionPerformed

    private void tblForceKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tblForceKeyReleased
        if ( evt.getKeyCode() == KeyEvent.VK_DELETE ) {
            btnRemoveUnitActionPerformed(null);
        }
    }//GEN-LAST:event_tblForceKeyReleased

    private void btnFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFilterActionPerformed
        skills.setMaxBV(Float.parseFloat(txtBVLimit.getText()));
        skills.setMaxSeperation(Integer.parseInt(spnSkillSeperationLimit.getValue().toString()));
        if ( rdoGunnery.isSelected() ) { skills.setMaxSkill(Skills.Gunnery); }
        if ( rdoPiloting.isSelected() ) { skills.setMaxSkill(Skills.Piloting); }
        if ( tblForce.getSelectedRowCount() == 0 ) { tblForce.selectAll(); }

        for ( int i : tblForce.getSelectedRows() ) {
            Unit u = (Unit) force.getUnits().get(tblForce.convertRowIndexToModel(i));
            skills.setBV(u.BaseBV);
            Skill skill = skills.getBestSkills();
            u.setGunnery(skill.getGunnery());
            u.setPiloting(skill.getPiloting());
            u.Refresh();
        }
        force.isDirty = true;
        force.RefreshBV();
}//GEN-LAST:event_btnFilterActionPerformed

    private void btnRandomNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRandomNameActionPerformed
        NameGenerator gen = new NameGenerator();
        boolean overwrite = chkOverwriteName.isSelected();
        if ( tblForce.getSelectedRowCount() == 0 ) { tblForce.selectAll(); }
        for ( int i : tblForce.getSelectedRows() ) {
            Unit u = (Unit) force.getUnits().get(tblForce.convertRowIndexToModel(i));
            if ( u.getMechwarrior().isEmpty() || overwrite ) u.setMechwarrior(gen.SimpleGenerate());
        }
        force.isDirty = true;
        force.RefreshBV();
}//GEN-LAST:event_btnRandomNameActionPerformed

    private void btnRandomGenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRandomGenActionPerformed
        skills.setSkillLevel(cmbSkillLevel.getSelectedItem().toString());
        if ( tblForce.getSelectedRowCount() == 0 ) { tblForce.selectAll(); }
        for ( int i : tblForce.getSelectedRows() ) {
            Unit u = (Unit) force.getUnits().get(tblForce.convertRowIndexToModel(i));
            Skill skill = skills.generateRandomSkill();
            u.setGunnery(skill.getGunnery());
            u.setPiloting(skill.getPiloting());
            u.Refresh();
        }
        force.isDirty = true;
        force.RefreshBV();
}//GEN-LAST:event_btnRandomGenActionPerformed

    public void WaitCursor() {
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
    }

    public void DefaultCursor() {
        setCursor(Cursor.getDefaultCursor());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton brnClearForce;
    private javax.swing.JButton btnAddMech;
    private javax.swing.JButton btnAmmoChooser;
    private javax.swing.JButton btnExportMTFs;
    private javax.swing.JButton btnExportMUL;
    private javax.swing.JButton btnFilter;
    private javax.swing.JButton btnImages;
    private javax.swing.JButton btnOpen;
    private javax.swing.JButton btnPrintForce;
    private javax.swing.JButton btnRandomGen;
    private javax.swing.JButton btnRandomName;
    private javax.swing.JButton btnRefresh;
    private javax.swing.JButton btnRemoveUnit;
    private javax.swing.JButton btnSave;
    private javax.swing.JCheckBox chkOverwriteName;
    private javax.swing.JComboBox cmbNameFilter;
    private javax.swing.JComboBox cmbSkillLevel;
    private javax.swing.JComboBox cmbUnitType;
    private javax.swing.JComboBox cmbView;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JToolBar.Separator jSeparator4;
    private javax.swing.JToolBar.Separator jSeparator5;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JLabel lblForceName;
    private javax.swing.JLabel lblLogo;
    private javax.swing.JLabel lblTotalBV;
    private javax.swing.JLabel lblTotalTons;
    private javax.swing.JLabel lblTotalUnits;
    private javax.swing.JMenu mnuExport;
    private javax.swing.JMenuItem mnuExportClipboard;
    private javax.swing.JMenuItem mnuExportMTF;
    private javax.swing.JMenuItem mnuExportMUL;
    private javax.swing.JMenuItem mnuExportText;
    private javax.swing.JMenu mnuFile;
    private javax.swing.JMenuItem mnuOpen;
    private javax.swing.JMenu mnuOptions;
    private javax.swing.JMenuItem mnuPrint;
    private javax.swing.JMenu mnuRun;
    private javax.swing.JMenuItem mnuRunBFB;
    private javax.swing.JMenuItem mnuSave;
    private javax.swing.JMenu mnuView;
    private javax.swing.JMenuItem mnuViewBF;
    private javax.swing.JMenuItem mnuViewInf;
    private javax.swing.JMenuItem mnuViewTW;
    private javax.swing.JRadioButton rdoGunnery;
    private javax.swing.JRadioButton rdoNeither;
    private javax.swing.JRadioButton rdoPiloting;
    private javax.swing.JScrollPane spnList;
    private javax.swing.JSpinner spnSkillSeperationLimit;
    private javax.swing.JTable tblForce;
    private javax.swing.JToolBar tlbActions;
    private javax.swing.JTextField txtBVLimit;
    private javax.swing.JTextField txtForceName;
    private javax.swing.JTextField txtGunnery;
    private javax.swing.JTextField txtPiloting;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the force
     */
    public Force getForce() {
        return force;
    }

    /**
     * @param force the force to set
     */
    public void setForce(Force force) {
        this.force = force;
    }

    public void lostOwnership(Clipboard clipboard, Transferable contents) {
        //do nothing
    }
}
